
/**
 * 由 Fantastic-admin 提供技术支持
 * Powered by Fantastic-admin
 * Gitee  https://gitee.com/hooray/fantastic-admin
 * Github https://github.com/hooray/fantastic-admin
 */
  
import{p as e}from"../@lezer_python@1.1.5/@lezer_python@1.1.5.c66db2bd.js";import{s as r,L as t,d as o,h as n,j as i,k as a,c as l}from"../@codemirror_language@6.6.0/@codemirror_language@6.6.0.b1412095.js";import{I as s,a as m}from"../@lezer_common@1.0.2/@lezer_common@1.0.2.f1b3fc52.js";import{i as c,c as p,s as d}from"../@codemirror_autocomplete@6.6.0_@codemirror_language@6.6.0_@codemirror_state@6.2.0_@codemirror_paybmlmgsxoxfhwyti4vm2xwei/@codemirror_autocomplete@6.6.0_@codemirror_language@6.6.0_@codemirror_state@6.2.0_@codemirror_paybmlmgsxoxfhwyti4vm2xwei.ad350a41.js";import"../@lezer_lr@1.3.4/@lezer_lr@1.3.4.69ac56de.js";import"../@lezer_highlight@1.1.4/@lezer_highlight@1.1.4.ab75f228.js";import"../@codemirror_state@6.2.0/@codemirror_state@6.2.0.50a19798.js";import"../@codemirror_view@6.10.1/@codemirror_view@6.10.1.3e2a74d9.js";import"../style-mod@4.0.3/style-mod@4.0.3.2c0c074d.js";import"../w3c-keyname@2.2.6/w3c-keyname@2.2.6.89c2fad7.js";const f=new m,u=new Set(["Script","Body","FunctionDefinition","ClassDefinition","LambdaExpression","ForStatement","MatchClause"]);function y(e){return(r,t,o)=>{if(o)return!1;let n=r.node.getChild("VariableName");return n&&t(n,e),!0}}const E={FunctionDefinition:y("function"),ClassDefinition:y("class"),ForStatement(e,r,t){if(t)for(let o=e.node.firstChild;o;o=o.nextSibling)if("VariableName"==o.name)r(o,"variable");else if("in"==o.name)break},ImportStatement(e,r){var t,o;let{node:n}=e,i="from"==(null===(t=n.firstChild)||void 0===t?void 0:t.name);for(let a=n.getChild("import");a;a=a.nextSibling)"VariableName"==a.name&&"as"!=(null===(o=a.nextSibling)||void 0===o?void 0:o.name)&&r(a,i?"variable":"namespace")},AssignStatement(e,r){for(let t=e.node.firstChild;t;t=t.nextSibling)if("VariableName"==t.name)r(t,"variable");else if(":"==t.name||"AssignOp"==t.name)break},ParamList(e,r){for(let t=null,o=e.node.firstChild;o;o=o.nextSibling)"VariableName"!=o.name||t&&/\*|AssignOp/.test(t.name)||r(o,"variable"),t=o},CapturePattern:y("variable"),AsPattern:y("variable"),__proto__:null};function _(e,r){let t=f.get(r);if(t)return t;let o=[],n=!0;function i(r,t){let n=e.sliceString(r.from,r.to);o.push({label:n,type:t})}return r.cursor(s.IncludeAnonymous).iterate((r=>{if(r.name){let e=E[r.name];if(e&&e(r,i,n)||!n&&u.has(r.name))return!1;n=!1}else if(r.to-r.from>8192){for(let t of _(e,r.node))o.push(t);return!1}})),f.set(r,o),o}const b=/^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/,g=["String","FormatString","Comment","PropertyName"];function x(e){let t=r(e.state).resolveInner(e.pos,-1);if(g.indexOf(t.name)>-1)return null;let o="VariableName"==t.name||t.to-t.from<20&&b.test(e.state.sliceDoc(t.from,t.to));if(!o&&!e.explicit)return null;let n=[];for(let r=t;r;r=r.parent)u.has(r.name)&&(n=n.concat(_(e.state.doc,r)));return{options:n,from:o?t.from:e.pos,validFor:b}}const h=["__annotations__","__builtins__","__debug__","__doc__","__import__","__name__","__loader__","__package__","__spec__","False","None","True"].map((e=>({label:e,type:"constant"}))).concat(["ArithmeticError","AssertionError","AttributeError","BaseException","BlockingIOError","BrokenPipeError","BufferError","BytesWarning","ChildProcessError","ConnectionAbortedError","ConnectionError","ConnectionRefusedError","ConnectionResetError","DeprecationWarning","EOFError","Ellipsis","EncodingWarning","EnvironmentError","Exception","FileExistsError","FileNotFoundError","FloatingPointError","FutureWarning","GeneratorExit","IOError","ImportError","ImportWarning","IndentationError","IndexError","InterruptedError","IsADirectoryError","KeyError","KeyboardInterrupt","LookupError","MemoryError","ModuleNotFoundError","NameError","NotADirectoryError","NotImplemented","NotImplementedError","OSError","OverflowError","PendingDeprecationWarning","PermissionError","ProcessLookupError","RecursionError","ReferenceError","ResourceWarning","RuntimeError","RuntimeWarning","StopAsyncIteration","StopIteration","SyntaxError","SyntaxWarning","SystemError","SystemExit","TabError","TimeoutError","TypeError","UnboundLocalError","UnicodeDecodeError","UnicodeEncodeError","UnicodeError","UnicodeTranslateError","UnicodeWarning","UserWarning","ValueError","Warning","ZeroDivisionError"].map((e=>({label:e,type:"type"})))).concat(["bool","bytearray","bytes","classmethod","complex","float","frozenset","int","list","map","memoryview","object","range","set","staticmethod","str","super","tuple","type"].map((e=>({label:e,type:"class"})))).concat(["abs","aiter","all","anext","any","ascii","bin","breakpoint","callable","chr","compile","delattr","dict","dir","divmod","enumerate","eval","exec","exit","filter","format","getattr","globals","hasattr","hash","help","hex","id","input","isinstance","issubclass","iter","len","license","locals","max","min","next","oct","open","ord","pow","print","property","quit","repr","reversed","round","setattr","slice","sorted","sum","vars","zip"].map((e=>({label:e,type:"function"})))),S=[d("def ${name}(${params}):\n\t${}",{label:"def",detail:"function",type:"keyword"}),d("for ${name} in ${collection}:\n\t${}",{label:"for",detail:"loop",type:"keyword"}),d("while ${}:\n\t${}",{label:"while",detail:"loop",type:"keyword"}),d("try:\n\t${}\nexcept ${error}:\n\t${}",{label:"try",detail:"/ except block",type:"keyword"}),d("if ${}:\n\t\n",{label:"if",detail:"block",type:"keyword"}),d("if ${}:\n\t${}\nelse:\n\t${}",{label:"if",detail:"/ else block",type:"keyword"}),d("class ${name}:\n\tdef __init__(self, ${params}):\n\t\t\t${}",{label:"class",detail:"definition",type:"keyword"}),d("import ${module}",{label:"import",detail:"statement",type:"keyword"}),d("from ${module} import ${names}",{label:"from",detail:"import",type:"keyword"})],v=c(g,p(h.concat(S)));function w(e,r){let t=e.lineIndent(r.from),o=e.lineAt(e.pos,-1),n=o.from+o.text.length;return/^\s*($|#)/.test(o.text)&&e.node.to<n+100&&!/\S/.test(e.state.sliceDoc(n,e.node.to))&&e.lineIndent(e.pos,-1)<=t||/^\s*(else:|elif |except |finally:)/.test(e.textAfter)&&e.lineIndent(e.pos,-1)>t?null:t+e.unit}const k=t.define({name:"python",parser:e.configure({props:[o.add({Body:e=>{var r;return null!==(r=w(e,e.node))&&void 0!==r?r:e.continue()},IfStatement:e=>/^\s*(else:|elif )/.test(e.textAfter)?e.baseIndent:e.continue(),TryStatement:e=>/^\s*(except |finally:|else:)/.test(e.textAfter)?e.baseIndent:e.continue(),"TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression":n({closing:")"}),"DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression":n({closing:"}"}),"ArrayExpression ArrayComprehensionExpression":n({closing:"]"}),"String FormatString":()=>null,Script:e=>{if(e.pos+/\s*/.exec(e.textAfter)[0].length>=e.node.to){let r=null;for(let t=e.node,o=t.to;t=t.lastChild,t&&t.to==o;)"Body"==t.type.name&&(r=t);if(r){let t=w(e,r);if(null!=t)return t}}return e.continue()}}),i.add({"ArrayExpression DictionaryExpression SetExpression TupleExpression":a,Body:(e,r)=>({from:e.from+1,to:e.to-(e.to==r.doc.length?0:1)})})]}),languageData:{closeBrackets:{brackets:["(","[","{","'",'"',"'''",'"""'],stringPrefixes:["f","fr","rf","r","u","b","br","rb","F","FR","RF","R","U","B","BR","RB"]},commentTokens:{line:"#"},indentOnInput:/^\s*([\}\]\)]|else:|elif |except |finally:)$/}});function I(){return new l(k,[k.data.of({autocomplete:x}),k.data.of({autocomplete:v})])}export{v as globalCompletion,x as localCompletionSource,I as python,k as pythonLanguage};
